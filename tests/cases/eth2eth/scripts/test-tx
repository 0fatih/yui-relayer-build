#!/bin/bash

set -eu

SCRIPT_DIR=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)
source ${SCRIPT_DIR}/util/relayer-util

ICS20_CLI="ethereum-ics20-cli"

TMP_DIR=/tmp
if ! which ${ICS20_CLI} > /dev/null 2>&1; then
  if [ ! -d "${TMP_DIR}" ]; then
    mkdir -p ${TMP_DIR}
  fi
  git clone https://github.com/datachainlab/ethereum-ics20-cli.git ${TMP_DIR}/ethereum-ics20-cli
  cd ${TMP_DIR}/ethereum-ics20-cli
  go install
  export PATH=$PATH:$(go env GOPATH)/bin
fi

SIMPLE_TOKEN_ADDRESS="0xff77d90d6aa12db33d3ba50a34fb25401f6e4c4f"
ICS20_TRANSFER_BANK_ADDRESS="0xaE1C9125BbcF63bf51294C4D15CBD472782E330D"
ICS20_BANK_ADDRESS="0x2F5703804E29F4252FA9405B8D357220d11b3bd9"

CHAIN_A_JSON=${CONF_DIR}/chains/ibc-0.json
CHAIN_B_JSON=${CONF_DIR}/chains/ibc-1.json
PATH_JSON=${CONF_DIR}/path.json

CHAIN_A_ID=$(jq -r '.chain."eth_chain_id"' ${CHAIN_A_JSON})
CHAIN_B_ID=$(jq -r '.chain."eth_chain_id"' ${CHAIN_B_JSON})

MNEMONIC_A=$(jq -r '.chain."hdw_mnemonic"' ${CHAIN_A_JSON})
MNEMONIC_B=$(jq -r '.chain."hdw_mnemonic"' ${CHAIN_B_JSON})

RPC_ADDRESS_A=$(jq -r '.chain."rpc_addr"' ${CHAIN_A_JSON})
RPC_ADDRESS_B=$(jq -r '.chain."rpc_addr"' ${CHAIN_B_JSON})

PORT_ID=$(jq -r '.dst."port-id"' ${PATH_JSON})
CHANNEL_ID=$(jq -r '.dst."channel-id"' ${PATH_JSON})

WALLET_ADDRESS_A=$(${ICS20_CLI} wallet address --mnemonic="${MNEMONIC_A}" --wallet-index=1)
WALLET_ADDRESS_B=$(${ICS20_CLI} wallet address --mnemonic="${MNEMONIC_B}" --wallet-index=2)

show_balance() {
  state=$1
  chain=$2
  user_wallet=$3
  token_address=$4
  user_name=$5
  balance=$(${ICS20_CLI} balance --rpc-address=${chain} --ics20-bank-address=${ICS20_BANK_ADDRESS} --wallet-address=${user_wallet} --token-address=${token_address})
  echo "${state} ibc0 balance of ${user_name}: $balance"
}

show_balance Before ${RPC_ADDRESS_A} ${WALLET_ADDRESS_A} ${SIMPLE_TOKEN_ADDRESS} alice
show_balance Before ${RPC_ADDRESS_B} ${WALLET_ADDRESS_B} ${SIMPLE_TOKEN_ADDRESS} bob

echo "!!! ibc0 -> ibc1 !!!"

TX_INTERNAL=1

FROM_INDEX=1
TRANSFER_AMOUNT=10
CHAIN_B_HEIGHT=$(${ICS20_CLI} chain height --rpc-address=${RPC_ADDRESS_B})
TIMEOUT_HEIGHT=$((CHAIN_B_HEIGHT + 1000))

# transfer token from alice to bob
${ICS20_CLI} transfer --rpc-address=${RPC_ADDRESS_A} --chain-id=${CHAIN_A_ID} --mnemonic="${MNEMONIC_A}" --ics20-bank-address=${ICS20_BANK_ADDRESS} --ics20-transfer-bank-address=${ICS20_TRANSFER_BANK_ADDRESS} --from-index=${FROM_INDEX} --to-address=${WALLET_ADDRESS_B} --amount=${TRANSFER_AMOUNT} --token-address=${SIMPLE_TOKEN_ADDRESS} --port-id=${PORT_ID} --channel-id=${CHANNEL_ID} --timeout-height=${TIMEOUT_HEIGHT}

sleep ${TX_INTERNAL}
${RLY} tx relay ibc01
sleep ${TX_INTERNAL}
${RLY} tx acks ibc01
sleep ${TX_INTERNAL}

# create chain b token address
CHAIN_B_TOKEN_ADDRESS="${PORT_ID}/${CHANNEL_ID}/${SIMPLE_TOKEN_ADDRESS}"

show_balance After ${RPC_ADDRESS_B} ${WALLET_ADDRESS_A} ${CHAIN_B_TOKEN_ADDRESS} alice
show_balance After ${RPC_ADDRESS_B} ${WALLET_ADDRESS_B} ${CHAIN_B_TOKEN_ADDRESS} bob
